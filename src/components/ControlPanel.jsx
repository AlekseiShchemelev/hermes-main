import React, { useState, useEffect } from 'react'
import { BarChart3, Database, AlertTriangle, Download, Upload, Save, Trash2 } from 'lucide-react'
import { orderService } from '../services/orderService'
import { toast } from '../utils/toast'
import './ControlPanel.css'

const ControlPanel = () => {
  const [activeTab, setActiveTab] = useState('stats')
  const [stats, setStats] = useState({
    totalOrders: 0,
    uniqueMaterials: 0,
    uniqueOrderNumbers: 0
  })
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    loadStats()
  }, [])

  const loadStats = async () => {
    try {
      setLoading(true)
      const data = await orderService.getStats()
      setStats(data)
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 'error')
    } finally {
      setLoading(false)
    }
  }

  const exportToCSV = async () => {
    try {
      setLoading(true)
      const csvData = await orderService.exportToCSV()
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      const blob = new Blob([csvData], { type: 'text/csv;charset=utf-8;' })
      const link = document.createElement('a')
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', `hermes_orders_${new Date().toISOString().split('T')[0]}.csv`)
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      toast('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', 'error')
    } finally {
      setLoading(false)
    }
  }

  const startImport = (byBottomNumber = false) => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = '.csv'
    input.onchange = async (e) => {
      const file = e.target.files[0]
      if (!file) return

      try {
        setLoading(true)
        const formData = new FormData()
        formData.append('file', file)
        formData.append('byBottomNumber', byBottomNumber)
        
        await orderService.importFromCSV(formData)
        toast('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
        loadStats() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      } catch (error) {
        toast('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞', 'error')
      } finally {
        setLoading(false)
      }
    }
    input.click()
  }

  const backupData = async () => {
    try {
      setLoading(true)
      const backup = await orderService.createBackup()
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ backup —Ñ–∞–π–ª–∞
      const blob = new Blob([JSON.stringify(backup, null, 2)], { type: 'application/json' })
      const link = document.createElement('a')
      const url = URL.createObjectURL(blob)
      link.setAttribute('href', url)
      link.setAttribute('download', `hermes_backup_${new Date().toISOString().split('T')[0]}.json`)
      link.style.visibility = 'hidden'
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      toast('Backup —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup', 'error')
    } finally {
      setLoading(false)
    }
  }

  const restoreBackup = () => {
    const input = document.createElement('input')
    input.type = 'file'
    input.accept = '.json'
    input.onchange = async (e) => {
      const file = e.target.files[0]
      if (!file) return

      if (!window.confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ backup –∑–∞–º–µ–Ω–∏—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
        return
      }

      try {
        setLoading(true)
        const formData = new FormData()
        formData.append('file', file)
        
        await orderService.restoreBackup(formData)
        toast('Backup –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
        loadStats() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      } catch (error) {
        toast('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è backup', 'error')
      } finally {
        setLoading(false)
      }
    }
    input.click()
  }

  const clearAllData = async () => {
    if (!window.confirm('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
      return
    }

    if (!window.confirm('–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ "–£–î–ê–õ–ò–¢–¨ –í–°–ï" –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–ª–µ:')) {
      return
    }

    const confirmation = window.prompt('–í–≤–µ–¥–∏—Ç–µ "–£–î–ê–õ–ò–¢–¨ –í–°–ï" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:')
    if (confirmation !== '–£–î–ê–õ–ò–¢–¨ –í–°–ï') {
      toast('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞', 'info')
      return
    }

    try {
      setLoading(true)
      await orderService.clearAllData()
      toast('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã', 'success')
      loadStats() // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö', 'error')
    } finally {
      setLoading(false)
    }
  }

  const tabs = [
    { id: 'stats', label: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: BarChart3 },
    { id: 'data', label: 'üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏', icon: Database },
    { id: 'danger', label: '‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞', icon: AlertTriangle }
  ]

  return (
    <div className="control-panel-container">
      <div className="panel-header">
        <h1>‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏</h1>
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */}
      <div className="tabs">
        {tabs.map(tab => {
          const Icon = tab.icon
          return (
            <button
              key={tab.id}
              className={`tab-btn ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <Icon size={20} />
              <span>{tab.label}</span>
            </button>
          )
        })}
      </div>

      {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="tab-content">
        {/* –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
        {activeTab === 'stats' && (
          <div className="stats-tab">
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-value">{stats.totalOrders}</div>
                <div className="stat-label">–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{stats.uniqueMaterials}</div>
                <div className="stat-label">–†–∞–∑–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{stats.uniqueOrderNumbers}</div>
                <div className="stat-label">–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤</div>
              </div>
            </div>
            
            <div className="stats-actions">
              <button
                className="btn btn-secondary"
                onClick={loadStats}
                disabled={loading}
              >
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
              </button>
            </div>
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ */}
        {activeTab === 'data' && (
          <div className="data-tab">
            <div className="btn-container">
              <button
                className="btn btn-primary"
                onClick={exportToCSV}
                disabled={loading}
              >
                <Download size={16} />
                –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
              </button>
              
              <button
                className="btn btn-secondary"
                onClick={() => startImport(false)}
                disabled={loading}
              >
                <Upload size={16} />
                –ò–º–ø–æ—Ä—Ç –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
              </button>
              
              <button
                className="btn btn-secondary"
                onClick={() => startImport(true)}
                disabled={loading}
              >
                <Upload size={16} />
                –ò–º–ø–æ—Ä—Ç –ø–æ –Ω–æ–º–µ—Ä—É –¥–Ω–∏—â–∞
              </button>
              
              <button
                className="btn btn-secondary"
                onClick={backupData}
                disabled={loading}
              >
                <Save size={16} />
                –°–æ–∑–¥–∞—Ç—å backup
              </button>
              
              <button
                className="btn btn-secondary"
                onClick={restoreBackup}
                disabled={loading}
              >
                <Upload size={16} />
                –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backup
              </button>
            </div>
          </div>
        )}

        {/* –í–∫–ª–∞–¥–∫–∞ –æ–ø–∞—Å–Ω–æ–π –∑–æ–Ω—ã */}
        {activeTab === 'danger' && (
          <div className="danger-tab">
            <div className="danger-zone">
              <h2 className="danger-title">‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞</h2>
              <p className="danger-text">
                –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã. 
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å backup –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —ç—Ç–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.
              </p>
              
              <div className="btn-container">
                <button
                  className="btn btn-danger"
                  onClick={clearAllData}
                  disabled={loading}
                >
                  <Trash2 size={16} />
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {loading && (
        <div className="loading-overlay">
          <div className="loading-spinner"></div>
          <div className="loading-text">–û–±—Ä–∞–±–æ—Ç–∫–∞...</div>
        </div>
      )}
    </div>
  )
}

export default ControlPanel

