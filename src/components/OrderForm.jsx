import React, { useState, useEffect } from 'react'
import { useNavigate, useParams } from 'react-router-dom'
import { Save, Trash2, X, ArrowLeft } from 'lucide-react'
import { format } from 'date-fns'
import { ru } from 'date-fns/locale'
import { orderService } from '../services/orderService'
import { toast } from '../utils/toast'
import './OrderForm.css'

const OrderForm = () => {
  const navigate = useNavigate()
  const { id } = useParams()
  const isEditing = Boolean(id)

  const [formData, setFormData] = useState({
    date: format(new Date(), 'yyyy-MM-dd'),
    orderNumber: '',
    diameter: '',
    thickness: '',
    typeSize: '',
    cutting: '',
    bottomNumber: '',
    material: '',
    heatTreatment: '',
    treatmentDate: '',
    executors: [
      { title: '–°–≤–∞—Ä—â–∏–∫', name: '', date: '' },
      { title: '–®—Ç–∞–º–ø–æ–≤–∫–∞', name: '', date: '' },
      { title: '–û—Ç–±–æ—Ä—Ç–æ–≤–∫–∞', name: '', date: '' },
      { title: '–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞', name: '', date: '' },
      { title: '–°–≤–∞—Ä—â–∏–∫ (–∑–∞–≥–ª—É—à–∫–∏)', name: '', date: '' },
      { title: '–†–µ–∑—á–∏–∫', name: '', date: '' }
    ]
  })

  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (isEditing) {
      loadOrder()
    }
  }, [id])

  const loadOrder = async () => {
    try {
      setLoading(true)
      const order = await orderService.getOrder(id)
      if (order) {
        setFormData({
          ...order,
          executors: order.executors || formData.executors
        })
      }
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞', 'error')
    } finally {
      setLoading(false)
    }
  }

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleExecutorChange = (index, field, value) => {
    setFormData(prev => ({
      ...prev,
      executors: prev.executors.map((executor, i) =>
        i === index ? { ...executor, [field]: value } : executor
      )
    }))
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!formData.orderNumber.trim()) {
      toast('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'error')
      return
    }

    try {
      setLoading(true)
      
      if (isEditing) {
        await orderService.updateOrder(id, formData)
        toast('–ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
      } else {
        await orderService.createOrder(formData)
        toast('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
      }
      
      navigate('/orders')
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'error')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async () => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?')) {
      return
    }

    try {
      setLoading(true)
      await orderService.deleteOrder(id)
      toast('–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success')
      navigate('/orders')
    } catch (error) {
      toast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞', 'error')
    } finally {
      setLoading(false)
    }
  }

  if (loading && isEditing) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
  }

  return (
    <div className="order-form-container">
      <div className="form-header">
        <h1>{isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞' : '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'}</h1>
        <div className="form-actions">
          <button
            type="button"
            className="btn btn-secondary"
            onClick={() => navigate('/orders')}
          >
            <ArrowLeft size={16} />
            –ö —Å–ø–∏—Å–∫—É
          </button>
        </div>
      </div>

      <form onSubmit={handleSubmit} className="order-form">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="form-section">
          <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="date" className="required">üìÖ –î–∞—Ç–∞</label>
              <input
                type="date"
                id="date"
                value={formData.date}
                onChange={(e) => handleInputChange('date', e.target.value)}
                required
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="orderNumber" className="required">üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</label>
              <input
                type="text"
                id="orderNumber"
                value={formData.orderNumber}
                onChange={(e) => handleInputChange('orderNumber', e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
                pattern="[A-Za-z0-9\-]+"
                title="–¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã"
                required
              />
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="diameter">üìè –î–∏–∞–º–µ—Ç—Ä (–º–º)</label>
              <input
                type="number"
                id="diameter"
                value={formData.diameter}
                onChange={(e) => handleInputChange('diameter', e.target.value)}
                placeholder="–î–∏–∞–º–µ—Ç—Ä –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö"
                min="0"
                step="0.1"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="thickness">üìê –¢–æ–ª—â–∏–Ω–∞ (–º–º)</label>
              <input
                type="number"
                id="thickness"
                value={formData.thickness}
                onChange={(e) => handleInputChange('thickness', e.target.value)}
                placeholder="–¢–æ–ª—â–∏–Ω–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö"
                min="0"
                step="0.1"
              />
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="typeSize">üî† –¢–∏–ø–æ—Ä–∞–∑–º–µ—Ä</label>
              <input
                type="text"
                id="typeSize"
                value={formData.typeSize}
                onChange={(e) => handleInputChange('typeSize', e.target.value)}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1000√ó2000"
                pattern="[0-9]+√ó[0-9]+"
                title="–§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ√ó—á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000√ó2000)"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="cutting">‚öôÔ∏è –†–∞—Å–∫—Ä–æ–π</label>
              <select
                id="cutting"
                value={formData.cutting}
                onChange={(e) => handleInputChange('cutting', e.target.value)}
              >
                <option value="">‚Äî –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫—Ä–æ–π ‚Äî</option>
                {['–û', '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó'].map(option => (
                  <option key={option} value={option}>{option}</option>
                ))}
              </select>
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label htmlFor="bottomNumber">üî¢ –ù–æ–º–µ—Ä –¥–Ω–∏—â–∞</label>
              <input
                type="text"
                id="bottomNumber"
                value={formData.bottomNumber}
                onChange={(e) => handleInputChange('bottomNumber', e.target.value)}
                placeholder="–ù–æ–º–µ—Ä –¥–Ω–∏—â–∞"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="material">üß± –ú–∞—Ç–µ—Ä–∏–∞–ª</label>
              <select
                id="material"
                value={formData.material}
                onChange={(e) => handleInputChange('material', e.target.value)}
              >
                <option value="">‚Äî –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª ‚Äî</option>
                {['09–ì2–°', '–°—Ç3—Å–ø', '12–•18–ù10–¢', '08–•18–ù10', 'AISI304', 'AISI304L', 'AISI321'].map(material => (
                  <option key={material} value={material}>{material}</option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ */}
        <div className="form-section">
          <h3>üë• –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –∏ –¥–∞—Ç—ã</h3>
          
          {formData.executors.map((executor, index) => (
            <div key={index} className="executor-item">
              <div className="executor-title">{executor.title}</div>
              <div className="form-row">
                <div className="form-group">
                  <input
                    type="text"
                    value={executor.name}
                    onChange={(e) => handleExecutorChange(index, 'name', e.target.value)}
                    placeholder="–§–ò–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="date"
                    value={executor.date}
                    onChange={(e) => handleExecutorChange(index, 'date', e.target.value)}
                    max="2099-12-31"
                  />
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* –¢–µ—Ä–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ */}
        <div className="form-section">
          <h3>üî• –¢–µ—Ä–º–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</h3>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="heatTreatment">–†–µ–∂–∏–º –¢–û</label>
              <input
                type="text"
                id="heatTreatment"
                value={formData.heatTreatment}
                onChange={(e) => handleInputChange('heatTreatment', e.target.value)}
                placeholder="–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Ä–º–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"
              />
            </div>
            
            <div className="form-group">
              <label htmlFor="treatmentDate">üìÖ –î–∞—Ç–∞ –¢–û</label>
              <input
                type="date"
                id="treatmentDate"
                value={formData.treatmentDate}
                onChange={(e) => handleInputChange('treatmentDate', e.target.value)}
                max="2099-12-31"
              />
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="form-actions">
          <button
            type="submit"
            className="btn btn-primary"
            disabled={loading}
          >
            <Save size={16} />
            {isEditing ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–°–æ–∑–¥–∞—Ç—å'}
          </button>
          
          {isEditing && (
            <button
              type="button"
              className="btn btn-danger"
              onClick={handleDelete}
              disabled={loading}
            >
              <Trash2 size={16} />
              –£–¥–∞–ª–∏—Ç—å
            </button>
          )}
          
          <button
            type="button"
            className="btn btn-secondary"
            onClick={() => navigate('/orders')}
            disabled={loading}
          >
            <X size={16} />
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>
      </form>
    </div>
  )
}

export default OrderForm

